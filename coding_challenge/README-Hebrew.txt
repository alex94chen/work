# מערכת למעקב אחרי משימות בצוות

## איך להריץ את המוצר
1. עבור לתיקית הפרויקט: `C:\work\coding_challenge`
2. פתח את CMD או טרמינל בתיקית הפרויקט: `coding_challenge`

3. יצירת רשת פנימית משותפת:
 
   docker network create my_net .


4. הרמת קונטיינר של רידיס:

   docker run -d --network my_net --name my_red redis


5. יצירת Docker Image:

   docker build -t imag_fastapi .


6. וידוא שהקונטיינר של רידיס פועל:

   docker logs my_red


7. הרמת 2 קונטיינרים (alice, bob):

   docker run --name alice -p 8000:80 -it --network my_net imag_fastapi:latest
   docker run --name bob -p 8080:80 -it --network my_net imag_fastapi:latest


## השימוש במוצר
השירות במוצר ממומש כשני מופעי שירות HTTP (alice, bob) הרצים באזורים שונים.

כניסה לממשק למשתמש באמצעות הקישורים הבאים:
- (http://127.0.0.1:8080/docs#/)
- (http://127.0.0.1:8000/docs#/)

לכל משתמש יש אפשרות לבצע את הפעולות הבאות:
1. יצירת משימות חדשות:
   - משימה כוללת כותרת ותיאור
   - משימות יכולות להכיל את אותו כותרת או\גם תיאור 

2. צפייה בכל המשימות הקיימות:
   - כולל משימות שנוצרו על ידי משתמשים אחרים

3. הסרת משימות כאשר הן הושלמו


## נקודות כלליות:
- הנחה שיש Docker על המחשב.
- הפקודות הן לממשק CMD - אפשר גם להשתמש ב-CLI שונה בהתאם.
- ניתן למחוק את כלל הנתונים ממסד הנתונים (DB) על ידי הסרת הערה בקובץ DB.py. 
*יש לעצור ולמחוק את מופעי הקונטיינרים ולאחר מכן לשחזר את הפעולות שנדרשות לייצור ה-Docker Image (ניתן גם לשנות שמות ופורטים ללא מחיקת הקומים).
- ניתן להשתמש בפורטים אחרים בפקודות ההרמה של הקונטיינרים ובהתאמה לכניסה לממשק ה-FastAPI.
-יש אפשרות להריץ קונטיינרים  - שרתים למשתמשים נוספים באותה הדרך, עם שמות ופורטים שונים לדוגמא:

  docker run --name mor -p 8008:80 -it --network my_net imag_fastapi:latest
  docker run --name tom -p 8888:80 -it --network my_net imag_fastapi:latest


## דברים שלא עשיתי בגלל קוצר בזמן:
- וידוא זמן התגובה סביר (מתחת ל-200 מילישני). 
- Unit test - בעזרת הספריה pytest יוצרת קובץ נוסף שעוסק בבדיקות מקרי קצה של הפונקציות השונות בתוכנית. 
*בשלב מתקדם יותר הייתי גם עושה App Testing כשאשר האפליקציה היתה מוכנה ליציאה - אבל כרגע זה שלב ממש התחלתי של המערכת.
- שיפור הפלטים על מנת ליצור פורמט אחיד ולהוסיף פלטים לצורך מעקב (log לקוד).
- הוספת קובץ שלישי למחלקת Task על מנת לשפר את המודולריות והקריאות של הקוד.
- העמקת הבנה בעולם התקשורת בין קונטיינרים והחלטה לגבי אופן מימוש התקשורת בינהם (נעשה שימוש כאן ברשת פנימית משותפת). 
*יכול להיות שהיה יעיל יותא להשתמש ב-Docker Compose אבל לא התעמקתי בכך.
- העמקת בניית האיסונכרוניות ובניית הזמן שבו נשלחות ונקבלות קריאות (פרטי הקוראות לא עוסקים בכך).
- טיפול בשגיאות - חוקרת איפה עלול להיות מצבים לא צפויים ודואגת לנהל את תגובת המערכת. 